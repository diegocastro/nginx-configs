user www-data;

# Number of processor cores
# grep ^processor /proc/cpuinfo | wc -l
worker_processes 2;

pid /run/nginx.pid;

events {
	# When you need > 8000 * cpu_cores connections, you start optimizing your OS,
	# and this is probably the point at which you hire people who are smarter than
	# you, as this is *a lot* of requests.
	worker_connections 8000;

	# Immediately accept as many connections as it can
	multi_accept on;

	# More efficient connection processing method.
	# You may need to change it according to your OS.
	# For Linux 2.6+.
	use epoll;
}

http {

	# Hide nginx version information.
	server_tokens off;

	# Define the MIME types for files.
	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	# Disable access_log to increase performance and disk usage
	access_log off;

	error_log /var/log/nginx/error.log;

	# How long to allow each connection to stay idle; longer values are better
	# for each individual client, particularly for SSL, but means that worker
	# connections are tied up longer. (Default: 65)
	keepalive_timeout 30;

	# Maximum number of requests that can be served through one keep-alive connection
	keepalive_requests 1000;

	# This helps avoid keeping an already closed socket with filled buffers
	# in a FIN_WAIT1 state for a long time.
	# It should be noted that timed out keep-alive connections are closed normally. 
	reset_timedout_connection on;

	# Speed up file transfers by using sendfile() to copy directly
	# between descriptors rather than using read()/write().
	# For performance reasons, on FreeBSD systems w/ ZFS 
	# this option should be disabled as ZFS's ARC caches
	# frequently used files in RAM by default.
	sendfile on;

	# Tell Nginx not to send out partial frames; this increases throughput
	# since TCP frames are filled up before being sent out. (adds TCP_CORK)
	tcp_nopush on;

	# Don't buffer data-sends (disable Nagle algorithm).
	# Good for sending frequent small bursts of data in real time.
	tcp_nodelay on;

	# Enable Gzip compressed.
	gzip on;

	# Compression level (1-9).
	# 5 is a perfect compromise between size and cpu usage, offering about
	# 75% reduction for most ascii files (almost identical to level 9).
	gzip_comp_level 6;

	# Don't compress anything that's already small and unlikely to shrink much
	# if at all (the default is 20 bytes, which is bad as that usually leads to
	# larger files after gzipping).
	gzip_min_length 256;

	# Compress data even for clients that are connecting to us via proxies,
	# identified by the "Via" header (required for CloudFront).
	gzip_proxied any;

	# Tell proxies to cache both the gzipped and regular version of a resource
	# whenever the client's Accept-Encoding capabilities header varies;
	# Avoids the issue where a non-gzip capable client (which is extremely rare
	# today) would display gibberish if their proxy gave them the gzipped version.
	gzip_vary on;

	# Compress all output labeled with one of the following MIME-types.
	gzip_types
		application/atom+xml
		application/javascript
		application/json
		application/ld+json
		application/manifest+json
		application/rss+xml
		application/vnd.geo+json
		application/vnd.ms-fontobject
		application/x-font-ttf
		application/x-web-app-manifest+json
		application/xhtml+xml
		application/xml
		font/opentype
		image/bmp
		image/svg+xml
		image/x-icon
		text/cache-manifest
		text/css
		text/plain
		text/vcard
		text/vnd.rim.location.xloc
		text/vtt
		text/x-component
		text/x-cross-domain-policy;

	# Smaller timeout time to not hog the workers
	client_body_timeout 30;

	# Max upload file size
	client_max_body_size 64m;

	# Smaller timeout time to not hog the workers
	send_timeout 30;

	# Bigger hash tables for faster performance
	types_hash_max_size 2048;

	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;
}